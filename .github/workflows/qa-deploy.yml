name: "Build and deploy QA"

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    name: "Build and Test Docker Image"
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2

      - name: "Login to Docker Hub"
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: "Build Docker image"
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ secrets.DOCKER_USERNAME }}/nodejs-image-demo:latest

      - name: "Run tests inside Docker container"
        run: |
          echo "Running tests before pushing the image..."
          docker run --rm ${{ secrets.DOCKER_USERNAME }}/nodejs-image-demo:latest npm test

      - name: "Push Docker image to Docker Hub"
        if: success()
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: ${{ secrets.DOCKER_USERNAME }}/nodejs-image-demo:latest
          push: true

  deploy:
    name: "Deploy to QA Environment"
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2

      - name: "SSH and Deploy to QA"
        env:
          DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/nodejs-image-demo:latest
        run: |
          echo "config ssh with user, host and password"
          ssh -o StrictHostKeyChecking=no -o BatchMode=yes -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}

          # echo "Deploying to QA..."
          # sshpass -p ${{ secrets.SSH_PASSWORD }} ssh -o StrictHostKeyChecking=no -o BatchMode=yes -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
          #   set -e
          #   echo "Pulling the latest Docker image..."
          #   docker pull $DOCKER_IMAGE

          #   echo "Stopping and removing the existing container..."
          #   docker stop nodejs-image-demo || true
          #   docker rm nodejs-image-demo || true

          #   echo "Running the new container..."
          #   docker run -d -p 80:8080 --name nodejs-image-demo --network host $DOCKER_IMAGE
          # EOF
